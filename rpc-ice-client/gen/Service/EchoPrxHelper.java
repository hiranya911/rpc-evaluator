// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `EchoPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Service;

public final class EchoPrxHelper extends Ice.ObjectPrxHelperBase implements EchoPrx
{
    public void
    doNothing()
    {
        doNothing(null, false);
    }

    public void
    doNothing(java.util.Map<String, String> __ctx)
    {
        doNothing(__ctx, true);
    }

    private void
    doNothing(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _EchoDel __del = (_EchoDel)__delBase;
                __del.doNothing(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __doNothing_name = "doNothing";

    public Ice.AsyncResult begin_doNothing()
    {
        return begin_doNothing(null, false, null);
    }

    public Ice.AsyncResult begin_doNothing(java.util.Map<String, String> __ctx)
    {
        return begin_doNothing(__ctx, true, null);
    }

    public Ice.AsyncResult begin_doNothing(Ice.Callback __cb)
    {
        return begin_doNothing(null, false, __cb);
    }

    public Ice.AsyncResult begin_doNothing(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_doNothing(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_doNothing(Callback_Echo_doNothing __cb)
    {
        return begin_doNothing(null, false, __cb);
    }

    public Ice.AsyncResult begin_doNothing(java.util.Map<String, String> __ctx, Callback_Echo_doNothing __cb)
    {
        return begin_doNothing(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_doNothing(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __doNothing_name, __cb);
        try
        {
            __result.__prepare(__doNothing_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_doNothing(Ice.AsyncResult __result)
    {
        __end(__result, __doNothing_name);
    }

    public int[]
    echoArray(int[] array)
    {
        return echoArray(array, null, false);
    }

    public int[]
    echoArray(int[] array, java.util.Map<String, String> __ctx)
    {
        return echoArray(array, __ctx, true);
    }

    private int[]
    echoArray(int[] array, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("echoArray");
                __delBase = __getDelegate(false);
                _EchoDel __del = (_EchoDel)__delBase;
                return __del.echoArray(array, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __echoArray_name = "echoArray";

    public Ice.AsyncResult begin_echoArray(int[] array)
    {
        return begin_echoArray(array, null, false, null);
    }

    public Ice.AsyncResult begin_echoArray(int[] array, java.util.Map<String, String> __ctx)
    {
        return begin_echoArray(array, __ctx, true, null);
    }

    public Ice.AsyncResult begin_echoArray(int[] array, Ice.Callback __cb)
    {
        return begin_echoArray(array, null, false, __cb);
    }

    public Ice.AsyncResult begin_echoArray(int[] array, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_echoArray(array, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_echoArray(int[] array, Callback_Echo_echoArray __cb)
    {
        return begin_echoArray(array, null, false, __cb);
    }

    public Ice.AsyncResult begin_echoArray(int[] array, java.util.Map<String, String> __ctx, Callback_Echo_echoArray __cb)
    {
        return begin_echoArray(array, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_echoArray(int[] array, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__echoArray_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __echoArray_name, __cb);
        try
        {
            __result.__prepare(__echoArray_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            iaHelper.write(__os, array);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int[] end_echoArray(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __echoArray_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = iaHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public byte[]
    echoBlob(byte[] blob)
    {
        return echoBlob(blob, null, false);
    }

    public byte[]
    echoBlob(byte[] blob, java.util.Map<String, String> __ctx)
    {
        return echoBlob(blob, __ctx, true);
    }

    private byte[]
    echoBlob(byte[] blob, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("echoBlob");
                __delBase = __getDelegate(false);
                _EchoDel __del = (_EchoDel)__delBase;
                return __del.echoBlob(blob, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __echoBlob_name = "echoBlob";

    public Ice.AsyncResult begin_echoBlob(byte[] blob)
    {
        return begin_echoBlob(blob, null, false, null);
    }

    public Ice.AsyncResult begin_echoBlob(byte[] blob, java.util.Map<String, String> __ctx)
    {
        return begin_echoBlob(blob, __ctx, true, null);
    }

    public Ice.AsyncResult begin_echoBlob(byte[] blob, Ice.Callback __cb)
    {
        return begin_echoBlob(blob, null, false, __cb);
    }

    public Ice.AsyncResult begin_echoBlob(byte[] blob, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_echoBlob(blob, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_echoBlob(byte[] blob, Callback_Echo_echoBlob __cb)
    {
        return begin_echoBlob(blob, null, false, __cb);
    }

    public Ice.AsyncResult begin_echoBlob(byte[] blob, java.util.Map<String, String> __ctx, Callback_Echo_echoBlob __cb)
    {
        return begin_echoBlob(blob, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_echoBlob(byte[] blob, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__echoBlob_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __echoBlob_name, __cb);
        try
        {
            __result.__prepare(__echoBlob_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            baHelper.write(__os, blob);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public byte[] end_echoBlob(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __echoBlob_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        byte[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = baHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public int
    echoInt(int i)
    {
        return echoInt(i, null, false);
    }

    public int
    echoInt(int i, java.util.Map<String, String> __ctx)
    {
        return echoInt(i, __ctx, true);
    }

    private int
    echoInt(int i, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("echoInt");
                __delBase = __getDelegate(false);
                _EchoDel __del = (_EchoDel)__delBase;
                return __del.echoInt(i, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __echoInt_name = "echoInt";

    public Ice.AsyncResult begin_echoInt(int i)
    {
        return begin_echoInt(i, null, false, null);
    }

    public Ice.AsyncResult begin_echoInt(int i, java.util.Map<String, String> __ctx)
    {
        return begin_echoInt(i, __ctx, true, null);
    }

    public Ice.AsyncResult begin_echoInt(int i, Ice.Callback __cb)
    {
        return begin_echoInt(i, null, false, __cb);
    }

    public Ice.AsyncResult begin_echoInt(int i, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_echoInt(i, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_echoInt(int i, Callback_Echo_echoInt __cb)
    {
        return begin_echoInt(i, null, false, __cb);
    }

    public Ice.AsyncResult begin_echoInt(int i, java.util.Map<String, String> __ctx, Callback_Echo_echoInt __cb)
    {
        return begin_echoInt(i, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_echoInt(int i, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__echoInt_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __echoInt_name, __cb);
        try
        {
            __result.__prepare(__echoInt_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(i);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_echoInt(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __echoInt_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.Map<java.lang.Integer, java.lang.Integer>
    echoMap(java.util.Map<java.lang.Integer, java.lang.Integer> map)
    {
        return echoMap(map, null, false);
    }

    public java.util.Map<java.lang.Integer, java.lang.Integer>
    echoMap(java.util.Map<java.lang.Integer, java.lang.Integer> map, java.util.Map<String, String> __ctx)
    {
        return echoMap(map, __ctx, true);
    }

    private java.util.Map<java.lang.Integer, java.lang.Integer>
    echoMap(java.util.Map<java.lang.Integer, java.lang.Integer> map, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("echoMap");
                __delBase = __getDelegate(false);
                _EchoDel __del = (_EchoDel)__delBase;
                return __del.echoMap(map, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __echoMap_name = "echoMap";

    public Ice.AsyncResult begin_echoMap(java.util.Map<java.lang.Integer, java.lang.Integer> map)
    {
        return begin_echoMap(map, null, false, null);
    }

    public Ice.AsyncResult begin_echoMap(java.util.Map<java.lang.Integer, java.lang.Integer> map, java.util.Map<String, String> __ctx)
    {
        return begin_echoMap(map, __ctx, true, null);
    }

    public Ice.AsyncResult begin_echoMap(java.util.Map<java.lang.Integer, java.lang.Integer> map, Ice.Callback __cb)
    {
        return begin_echoMap(map, null, false, __cb);
    }

    public Ice.AsyncResult begin_echoMap(java.util.Map<java.lang.Integer, java.lang.Integer> map, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_echoMap(map, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_echoMap(java.util.Map<java.lang.Integer, java.lang.Integer> map, Callback_Echo_echoMap __cb)
    {
        return begin_echoMap(map, null, false, __cb);
    }

    public Ice.AsyncResult begin_echoMap(java.util.Map<java.lang.Integer, java.lang.Integer> map, java.util.Map<String, String> __ctx, Callback_Echo_echoMap __cb)
    {
        return begin_echoMap(map, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_echoMap(java.util.Map<java.lang.Integer, java.lang.Integer> map, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__echoMap_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __echoMap_name, __cb);
        try
        {
            __result.__prepare(__echoMap_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            intMapHelper.write(__os, map);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.Map<java.lang.Integer, java.lang.Integer> end_echoMap(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __echoMap_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.Map<java.lang.Integer, java.lang.Integer> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = intMapHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public edu.ucsb.cs.rpc.base.DataObject
    echoObject(edu.ucsb.cs.rpc.base.DataObject obj)
    {
        return echoObject(obj, null, false);
    }

    public edu.ucsb.cs.rpc.base.DataObject
    echoObject(edu.ucsb.cs.rpc.base.DataObject obj, java.util.Map<String, String> __ctx)
    {
        return echoObject(obj, __ctx, true);
    }

    private edu.ucsb.cs.rpc.base.DataObject
    echoObject(edu.ucsb.cs.rpc.base.DataObject obj, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("echoObject");
                __delBase = __getDelegate(false);
                _EchoDel __del = (_EchoDel)__delBase;
                return __del.echoObject(obj, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __echoObject_name = "echoObject";

    public Ice.AsyncResult begin_echoObject(edu.ucsb.cs.rpc.base.DataObject obj)
    {
        return begin_echoObject(obj, null, false, null);
    }

    public Ice.AsyncResult begin_echoObject(edu.ucsb.cs.rpc.base.DataObject obj, java.util.Map<String, String> __ctx)
    {
        return begin_echoObject(obj, __ctx, true, null);
    }

    public Ice.AsyncResult begin_echoObject(edu.ucsb.cs.rpc.base.DataObject obj, Ice.Callback __cb)
    {
        return begin_echoObject(obj, null, false, __cb);
    }

    public Ice.AsyncResult begin_echoObject(edu.ucsb.cs.rpc.base.DataObject obj, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_echoObject(obj, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_echoObject(edu.ucsb.cs.rpc.base.DataObject obj, Callback_Echo_echoObject __cb)
    {
        return begin_echoObject(obj, null, false, __cb);
    }

    public Ice.AsyncResult begin_echoObject(edu.ucsb.cs.rpc.base.DataObject obj, java.util.Map<String, String> __ctx, Callback_Echo_echoObject __cb)
    {
        return begin_echoObject(obj, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_echoObject(edu.ucsb.cs.rpc.base.DataObject obj, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__echoObject_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __echoObject_name, __cb);
        try
        {
            __result.__prepare(__echoObject_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeSerializable(obj);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public edu.ucsb.cs.rpc.base.DataObject end_echoObject(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __echoObject_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        edu.ucsb.cs.rpc.base.DataObject __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = (edu.ucsb.cs.rpc.base.DataObject)__is.readSerializable();
        __is.endReadEncaps();
        return __ret;
    }

    public String
    echoString(String s)
    {
        return echoString(s, null, false);
    }

    public String
    echoString(String s, java.util.Map<String, String> __ctx)
    {
        return echoString(s, __ctx, true);
    }

    private String
    echoString(String s, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("echoString");
                __delBase = __getDelegate(false);
                _EchoDel __del = (_EchoDel)__delBase;
                return __del.echoString(s, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __echoString_name = "echoString";

    public Ice.AsyncResult begin_echoString(String s)
    {
        return begin_echoString(s, null, false, null);
    }

    public Ice.AsyncResult begin_echoString(String s, java.util.Map<String, String> __ctx)
    {
        return begin_echoString(s, __ctx, true, null);
    }

    public Ice.AsyncResult begin_echoString(String s, Ice.Callback __cb)
    {
        return begin_echoString(s, null, false, __cb);
    }

    public Ice.AsyncResult begin_echoString(String s, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_echoString(s, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_echoString(String s, Callback_Echo_echoString __cb)
    {
        return begin_echoString(s, null, false, __cb);
    }

    public Ice.AsyncResult begin_echoString(String s, java.util.Map<String, String> __ctx, Callback_Echo_echoString __cb)
    {
        return begin_echoString(s, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_echoString(String s, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__echoString_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __echoString_name, __cb);
        try
        {
            __result.__prepare(__echoString_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(s);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_echoString(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __echoString_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    public static EchoPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        EchoPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (EchoPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    EchoPrxHelper __h = new EchoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static EchoPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        EchoPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (EchoPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    EchoPrxHelper __h = new EchoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static EchoPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        EchoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    EchoPrxHelper __h = new EchoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static EchoPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        EchoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    EchoPrxHelper __h = new EchoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static EchoPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        EchoPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (EchoPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                EchoPrxHelper __h = new EchoPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static EchoPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        EchoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            EchoPrxHelper __h = new EchoPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Service::Echo"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _EchoDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _EchoDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, EchoPrx v)
    {
        __os.writeProxy(v);
    }

    public static EchoPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            EchoPrxHelper result = new EchoPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
